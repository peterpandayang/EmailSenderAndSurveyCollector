const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

passport.serializeUser((user, done) => {
  // this user is the user that we got from below
  done(null, user.id);
  // this user id is generated by mongodb from profile.Id
});

passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    // async operation
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    (accessToken, refreshToken, profile, done) => {
      // console.log('accessToken', accessToken);
      // console.log('refresh token', refreshToken);
      // console.log('profile:', profile);
      User.findOne({ googleId: profile.id }).then(existingUser => {
        // async operation
        if (existingUser) {
          // we already have a record for the user with the profile id
          done(null, existingUser);
        } else {
          // we do not have the user with the profile id
          new User({ googleId: profile.id })
            .save()
            .then(user => done(null, user)); // since it is async and may change, so we need to pull one from the db again even it is the same as the one we create
        }
      });
    }
  )
);
